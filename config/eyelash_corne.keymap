// Fixed ZMK Keymap Code
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>

// Remove duplicate includes
// #include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/pointing.h>
// #include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 7200 // 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING1>, <BINDING2>; \
                mods = <(MOD_L##MOD | MOD_R##MOD)>;)

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        // Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner_morph>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
        
        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL | MOD_RCTL)>;
        };
        
        // Tap: qmark | Shift + tap: excl.
        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <30>;
    };

    macros {
        macro_1: macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MACRO_1";
        };

        // Missing macros that were referenced in keymaps
        studio_unlock: studio_unlock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(L)))>;
            label = "STUDIO_UNLOCK";
        };

        soft_off: soft_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_CLR_ALL>;
            label = "SOFT_OFF";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            display-name = "QWERTY";
            bindings = <
&kp GRAVE  &mt LS(F10) Q   &kp W           &kp E            &kp R        &kp T                                      &mmv MOVE_UP                     &kp Y        &kp U            &kp I        &kp O           &kp P              &kp HOME
&lt 5 ESC  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LSHIFT D     &mt LCTRL F  &kp G                      &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H        &mt RCTRL J      &mt RSHFT K  &mt LEFT_ALT L  &mt LEFT_GUI dot_morph  &kp SQT
&lt 3 F19  &kp Z           &kp X           &kp C            &kp V        &kp B      &lt 5 K_MUTE                    &mmv MOVE_DOWN                   &kp N        &mt HOME M       &kp COMMA    &kp DOT         &mt END qexcl       &lt 3 END
                                           &lt 5 BACKSPACE  &lt 4 SPACE  &lt 6 TAB                                                                   &lt 8 ENTER  &lt 7 BACKSPACE  &lt 9 DEL
            >;

            sensor-bindings = <&inc_dec_kp LS(TAB) TAB>;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp K_SLEEP       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp C_SLEEP       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp C_SLEEP_MODE  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans            &trans  &trans
            >;
        };

        BUTTON {
            bindings = <
&trans  &kp K_SLEEP       &kp C_MUTE   &trans  &trans        &bl BL_TOG                    &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_ON   &rgb_ug RGB_OFF  &trans           &trans           &ext_power EP_ON
&trans  &kp C_SLEEP       &kp K_MUTE   &trans  &bl BL_CYCLE  &bl BL_INC            &trans  &trans  &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &ext_power EP_OFF
&trans  &kp C_SLEEP_MODE  &kp K_MUTE2  &trans  &trans        &bl BL_DEC  &trans            &trans          &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &trans
                                       &trans  &trans        &trans                                        &trans           &trans           &trans
            >;
        };

        TAP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
&trans  &kp LS(F10)  &kp LC(W)  &trans     &trans     &trans                    &trans          &trans     &trans    &trans     &trans     &trans     &trans
&trans  &kp LGUI     &kp LALT   &kp LSHFT  &kp LCTRL  &trans            &trans  &trans  &trans  &trans     &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans  &trans       &trans     &trans     &trans     &trans  &trans            &trans          &trans     &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
                                &trans     &trans     &trans                                    &kp ENTER  &kp BSPC  &kp DEL
            >;

            label = "NAV";
        };

        MEDIA {
            bindings = <
&trans  &trans                &kp LA(F4)            &trans                &trans                &trans                                      &kp LG(UP_ARROW)                   &trans          &trans            &trans          &trans          &trans          &trans
&trans  &kp LG(LC(NUMBER_1))  &kp LC(LG(NUMBER_2))  &kp LC(LG(NUMBER_3))  &kp LC(LG(NUMBER_4))  &kp LC(LG(N5))                &kp LG(LEFT)  &kp LG(TAB)         &kp LG(RIGHT)  &kp LC(LG(N6))  &kp LC(LG(N7))    &kp LG(LC(N8))  &kp LC(LG(N9))  &kp LC(LG(N0))  &bt BT_PRV
&trans  &trans                &trans                &trans                &trans                &trans          &kp K_MUTE                  &kp LG(DOWN_ARROW)                 &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_NXT
                                                    &trans                &trans                &trans                                                                         &kp K_PREV      &kp K_PLAY_PAUSE  &kp C_NEXT
            >;

            label = "MEDIA";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        MOUSE {
            bindings = <
&bootloader     &trans        &kp LA(F4)    &trans        &trans        &studio_unlock                            &mmv MOVE_UP                     &trans     &trans          &trans          &trans        &trans           &trans
&bt BT_CLR_ALL  &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL     &trans                    &mmv MOVE_LEFT  &mkp RCLK       &mmv MOVE_RIGHT  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_NXT      &trans                    &mmv MOVE_DOWN                   &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                                            &trans        &trans        &trans                                                                     &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;

            label = "MOUSE";
        };

        NUM {
            display-name = "NUM";
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT                                 &mmv MOVE_UP                     &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &bootloader
&trans  &kp SEMI   &kp N1  &kp N2   &kp N3  &kp EQUAL                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp SPACE  &kp RCTRL  &kp RSHFT  &kp LALT   &kp LGUI   &bootloader
&trans  &kp GRAVE  &kp N4  &kp N5   &kp N6  &kp BSLH   &kp C_MUTE                    &mmv MOVE_DOWN                   &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
                           &kp DOT  &kp N0  &kp MINUS                                                                 &kp SPACE  &kp SPACE  &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        SYM {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                            &mmv MOVE_UP                     &studio_unlock  &kp SPACE  &kp SPACE  &soft_off  &sys_reset  &bootloader
&trans  &kp SEMICOLON   &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                   &mmv MOVE_LEFT  &mkp RCLK       &mmv MOVE_RIGHT  &trans          &kp RCTRL  &kp RSHFT  &kp LALT   &kp LGUI    &bt BT_CLR_ALL
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp POUND              &kp PIPE         &trans                    &mmv MOVE_DOWN                   &trans          &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE   &bt BT_CLR
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                                              &trans          &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Fn {
            display-name = "FUN";
            bindings = <
&studio_unlock  &trans  &kp F7  &kp F8   &kp F9   &trans                                &mmv MOVE_UP                     &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
&trans          &trans  &kp F1  &kp F2   &kp F3   &trans                &mmv MOVE_LEFT  &mkp RCLK       &mmv MOVE_RIGHT  &kp SPACE  &kp LCTRL  &kp RSHFT  &kp LALT   &kp LGUI   &kp SPACE
&trans          &trans  &kp F4  &kp F5   &kp F6   &trans  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans     &trans     &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
                                 &kp F10  &kp F11  &kp F12                                                                &kp SPACE  &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "FUN";
        };
    };
};