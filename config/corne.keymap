#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define XXX &none
#define ___ &trans

/*

MIRYOKU_LAYER_LIST \
MIRYOKU_X(BASE,   "Base") \
MIRYOKU_X(EXTRA,  "Extra") \
MIRYOKU_X(TAP,    "Tap") \
MIRYOKU_X(BUTTON, "Button") \
MIRYOKU_X(NAV,    "Nav") \
MIRYOKU_X(MOUSE,  "Mouse") \
MIRYOKU_X(MEDIA,  "Media") \
MIRYOKU_X(NUM,    "Num") \
MIRYOKU_X(SYM,    "Sym") \
MIRYOKU_X(FUN,    "Fun")

#define U_BASE   0
#define U_EXTRA  1
#define U_TAP    2
#define U_BUTTON 3
#define U_NAV    4
#define U_MOUSE  5
#define U_MEDIA  6
#define U_NUM    7
#define U_SYM    8
#define U_FUN    9

*/

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    macros {
        flash_macro: flash_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <21 22 23>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <17 16 15 14>;
            hold-trigger-on-release;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 22>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 30>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 7>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&as TILDE GRAVE  &mt LS(F10) Q    &kp W            &kp E                &kp R              &kp T         &kp UP_ARROW     &kp Y         &mt HOME U          &kp I                 &kp O                    &mt END P                 &as PLUS EQUAL
&lt 3 ESCAPE     &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G         &kp DOWN_ARROW   &kp H         &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L         &hmr RIGHT_GUI SEMICOLON  &as DOUBLE_QUOTES SQT
&tog 4           &kp Z            &kp X            &kp C                &kp V              &kp B         &kp LEFT_ARROW   &kp N         &kp M               &as LESS_THAN COMMA   &as GREATER_THAN PERIOD  &as QUESTION SLASH        &tog 5
                                  &kp C_MUTE       &ltq 6 BACKSPACE     &ltq 4 SPACE       &ltq 5 TAB    &kp RIGHT_ARROW  &ltq 8 ENTER  &ltq 7 BACKSPACE    &ltq 9 DELETE
                                                                                                         &to 5
            >;

            label = "Qwerty";
            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
                                                  &trans
            >;

            label = "EXTRA";
        };

        TAP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
                                                  &trans
            >;

            label = "TAP";
        };

        BUTTON {
            bindings = <
&trans  &kp LS(LG(LC(LA(Q))))  &trans   &kp LG(LC(LA(E)))  &kp LC(F24)        &kp LS(LG(LC(LA(T))))    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LC(LA(T)))      &kp F24  &kp LS(F24)        &kp LG(LC(LA(F)))  &kp LG(LC(LA(G)))        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                 &trans   &kp LG(LC(LA(C)))  &kp LS(LC(V))      &kp LS(LG(LC(LA(B))))    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                               &trans   &trans             &trans             &trans                   &trans  &trans  &trans  &trans
                                                                                                       &trans
            >;

            label = "BUTTON";
        };

        NAV {
            bindings = <
&trans  &kp LS(F10)   &kp LA(F4)    &trans            &trans          &kp C_VOLUME_UP      &trans  &kp C_BRIGHTNESS_INC   &kp HOME        &kp PG_DN       &kp PG_UP     &kp END          &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp C_VOLUME_DOWN    &trans  &kp C_BRIGHTNESS_DEC   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&to 0   &trans        &trans        &trans            &trans          &kp K_MUTE           &trans  &kp C_BRIGHTNESS_AUTO  &trans          &trans          &trans        &trans           &trans
                      &trans        &kp BACKSPACE     &kp SPACE       &kp TAB              &trans  &kp ENTER              &kp BACKSPACE   &kp DELETE
                                                                                           &to 0
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
            label = "Nav";
        };

        Mouse {
            bindings = <
&bootloader   &bt BT_CLR_ALL  &kp LA(F4)    &trans        &trans          &trans        &mmv MOVE_UP     &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
&trans        &kp LEFT_GUI    &kp LEFT_ALT  &kp LCTRL     &kp LEFT_SHIFT  &bt BT_PRV    &mmv MOVE_DOWN   &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_NXT    &mmv MOVE_LEFT   &trans     &trans          &trans          &trans        &trans           &to 0
                              &to 0         &mkp MCLK     &mkp RCLK       &mkp LCLK     &mmv MOVE_RIGHT  &mkp LCLK  &mkp RCLK       &mkp MCLK
                                                                                        &to 0
            >;

            label = "Mouse";
            sensor-bindings = <&scroll_encoder>;
        };

        MEDIA {
            bindings = <
&trans          &trans                &kp LA(F4)            &trans                &trans                &trans            &kp LG(UP)     &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans
&kp LG(TAB)     &kp LG(LC(NUMBER_1))  &kp LC(LG(NUMBER_2))  &kp LC(LG(NUMBER_3))  &kp LC(LG(NUMBER_4))  &kp LC(LG(N5))    &kp LG(DOWN)   &kp LC(LG(N6))  &kp LC(LG(N7))    &kp LG(LC(N8))  &kp LC(LG(N9))  &kp LC(LG(N0))  &trans
&bt BT_CLR_ALL  &trans                &trans                &trans                &trans                &trans            &kp LG(LEFT)   &bt BT_NXT      &bt BT_PRV        &trans          &trans          &trans          &trans
                                      &trans                &trans                &trans                &trans            &kp LG(RIGHT)  &kp K_PREV      &kp K_PLAY_PAUSE  &kp C_NEXT
                                                                                                                          &trans
            >;

            label = "Media";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        NUM {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans  &trans  &trans  &trans  &trans  &trans
                   &trans  &kp DOT  &kp N0  &kp MINUS    &trans  &trans  &trans  &trans
                                                         &trans
            >;

            label = "Num";
        };

        Symbol {
            bindings = <
&bootloader     &kp LEFT_BRACE  &kp AMPERSAND  &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &kp LCTRL  &kp AMPERSAND    &kp ASTERISK           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &bootloader
&trans          &kp SEMICOLON   &kp DOLLAR     &kp PERCENT           &kp CARET              &kp PLUS           &trans  &kp MINUS  &kp RIGHT_SHIFT  &kp LCTRL              &kp LALT              &kp LGUI               &trans
&bt BT_CLR_ALL  &kp TILDE       &kp EXCL       &kp AT_SIGN           &kp POUND              &kp PIPE           &trans  &kp GRAVE  &as PLUS EQUAL   &as DOUBLE_QUOTES SQT  &as PIPE BACKSLASH    &kp DELETE             &bt BT_CLR_ALL
                                &trans         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER          &trans  &trans     &trans           &trans
                                                                                                               &trans
            >;

            label = "Sym";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Fn {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9     &trans     &trans  &kp CLCK  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6     &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3     &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans
                 &trans  &trans  &kp SPACE  &kp TAB    &trans  &trans    &trans  &trans
                                                       &trans
            >;

            label = "Fn";
        };

        Modify {
            bindings = <
&kp LG(Q)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5        &trans  &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8       &kp NUMBER_9   &kp NUMBER_0   &trans
&trans     &kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LEFT_BRACKET    &trans  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &trans
&trans     &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LEFT_BRACE      &trans  &kp RIGHT_BRACE    &kp F1           &kp F2             &kp F3         &kp F4         &trans
                         &trans        &trans        &trans        &trans              &trans  &trans             &trans           &trans
                                                                                       &trans
            >;

            label = "Modify";
        };

        Rgb {
            bindings = <
&ext_power EP_TOG  &trans  &trans  &trans  &trans           &rgb_ug RGB_SPI    &rgb_ug RGB_HUI  &rgb_ug RGB_SPD  &trans           &trans  &trans  &trans  &trans
&trans             &trans  &trans  &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_EFR    &rgb_ug RGB_HUD  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &trans  &trans  &trans  &trans
&trans             &trans  &trans  &trans  &trans           &trans             &rgb_ug RGB_SAI  &trans           &trans           &trans  &trans  &trans  &trans
                           &to 11  &trans  &trans           &trans             &rgb_ug RGB_SAD  &trans           &trans           &trans
                                                                               &rgb_ug RGB_TOG
            >;

            label = "Rgb";
            sensor-bindings = <&rgb_encoder &scroll_encoder>;
        };

        Flash {
            bindings = <
&flash_macro  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_CLR    &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
                      &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans
                                                        &trans
            >;

            label = "Flash";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Flash {
            if-layers = <10 8>;
            then-layer = <12>;
        };
    };
};
